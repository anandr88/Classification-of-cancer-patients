# -*- coding: utf-8 -*-
"""kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uyrxPoLdtlTmYCDXrKUSzD91b56oK5Jz
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn import svm

import numpy as np
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
# %matplotlib inline
import umap

import {combineReducers} from 'redux';
import taskReducer from './handle-action';

const rootReducer = combineReducers({
    tasks: taskReducer
});

export default rootReducer;

!pip install umap
!pip install redux

kaggle_train2=pd.read_csv("kaggle_train.csv")
y_train=kaggle_train2.Labels
x_train = kaggle_train2.drop(columns=['ID', 'Labels'])

x_train

"""# first run"""

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(max_depth=10,n_estimators=1000, random_state=0,bootstrap= [True])
clf.fit(x_train, y_train)

kaggle_test2=pd.read_csv("kaggle_test.csv")
testing = kaggle_test2.drop(columns=['ID'])

a_testing=clf.predict_proba(testing)[:,1]

df_test = kaggle_test2[['ID']]

df_test['Labels'] = a_testing

np.mean(a_testing)



labels=df_test["Labels"]

ID=df_test["ID"]

aa=(labels>0.45).astype(int)

aa

df_test['Labels']= aa

df_test.to_csv('First_Run.csv', index=None)

"""# SECOND RUN"""

train_x, valid_x,train_y, valid_y = train_test_split(
    x, y, test_size=0.2, random_state=42)

clf = svm.SVC(kernel='poly', C=100, degree=6)
clf.fit(x_train, y_train)
scores = cross_val_score(clf, train_x, train_y, cv=3, scoring='roc_auc')
scores

from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
param_grid = { 'C':[0.1,1,100,1000],'kernel':['rbf','poly','sigmoid','linear'],'degree':[1,2,3,4,5,6]}
grid = GridSearchCV(SVC(),param_grid)
grid.fit(x_train,y_train)

print(grid.best_params_)
print(grid.score(x_train,y_train))

prediction_model=grid.predict(testing)

prediction_model

prediction_model = pd.DataFrame(prediction_model, columns=['Labels'])
prediction_model.to_csv('output_run_ht.csv')

np.mean(scores)

b_testing=clf.predict(testing)

np.mean(b_testing)

df_test2 = kaggle_test2[['ID']]

b_testing



df_test2['Labels'] = b_testing

df_test2.to_csv('second_Run.csv')











"""# third run"""

train_data=pd.read_csv('kaggle_train.csv')

train_data

train_data = train_data.dropna()
train_data.Labels.value_counts()

sns.pairplot(train_data, hue='Labels');

train_data2 = train_data[
    [
        "ACAN",
        "AGER",
        "ALPK1",
        "ANKRD17",
        "APOB",
        "APPL1",
        "APPL2",
        "ARRB2",
        "ASGR1",
        'ASGR2',
        'ATRN',
        'ATRNL1',
        'BCAN',
        'BCL10',
        'BIRC2',
        'BIRC3',
        'BPIFB1',
        'BTK',
        'C1QBP',
        'CACTIN',
        'CASP8',
        'CAV1',
        'CD14',
        'CD163',
        'CD163L1',
        'CD207',
        'CD209',
        'CD248',
        'CD300A',
        'CD300LF',
        'CD302',
        'CD36',
        'CD5',
        'CD5L',
        'CD6',
        'CD68',
        'CD69',
        'CD72',
        'CD93',
        'CFI',
        'CHODL',
        'CHUK',
        'CIITA',
        'CLEC10A',
        'CLEC11A',
        'CLEC12A',
        'CLEC12B',
        'CLEC14A',
        'CLEC16A',
        'CLEC17A',
        'CLEC18A',
        'CLEC18B',
        'CLEC18C',
        'CLEC1A',
        'CLEC1B',
        'CLEC2A',
        'CLEC2B',
        'CLEC2D',
        'CLEC2L',
        'CLEC3A',
        'CLEC3B',
        'CLEC4A',
        'CLEC4C',
        'CLEC4D',
        'CLEC4E',
        'CLEC4F',
        'CLEC4G',
        'CLEC5A',
        'CLEC6A',
        'CLEC7A',
        'CLEC9A',
        'CNPY3',
        'COLEC10',
        'COLEC11',
        'COLEC12',
        'CORIN',
        'CTSB',
        'CTSK',
        'CTSL',
        'CTSS',
        'CXCL16',
        'CYBA',
        'CYLD',
        'DAB2IP',
        'DDX58',
        'DDX60',
        'DGCR2',
        'DHX58',
        'DMBT1',
        'ERBIN',
        'ESR1',
        'F2RL1',
        'FADD',
        'FCER2',
        'FCN1',
        'FCRL3',
        'FFAR2',
        'FGA',
        'FGB',
        'FGG',
        'FLOT1',
        'FREM1',
        'GFI1',
        'GPATCH3',
        'GPS2',
        'GRAMD4',
        'HAVCR2',
        'HHIPL1',
        'HMGB1',
        'HPN',
        'HSP90B1',
        'HSPA1A',
        'HSPA1B',
        'HSPD1',
        'IFIH1',
        'IKBKB',
        'IKBKE',
        'IKBKG',
        'INAVA',
        'IRAK1',
        'IRAK2',
        'IRAK3',
        'IRAK4',
        'IRF1',
        'IRF3',
        'IRF4',
        'IRF7',
        'IRGM',
        'ITCH',
        'ITGAM',
        'ITGB2',
        'KLRB1',
        'KLRC1',
        'KLRC2',
        'KLRC3',
        'KLRD1',
        'KLRF1',
        'KLRG1',
        'KLRG2',
        'KLRK1',
        'LAYN',
        'LBP',
        'LGALS3BP',
        'LGMN',
         'LGR4',
         'LILRA2',
        'LILRA4',
        'LOXL2',
        'LOXL3',
        'LOXL4',
        'LRRC14',
        'LSM14A',
        'LTF',
        'LY75',
        'LY96',
        'LYN',
        'MAP2K6',
        'MAP3K1',
        'MAP3K7',
        'MAPKAPK3',
        'MARCO',
        'MBL1P',
        'MEGF10',
        'MFHAS1',
        'MRC1',
        'MRC2',
        'MSR1',
        'MYD88',
        'NAIP',
        'NCAN',
        'NFKBIA',
        'NFKBIL1',
        'NLRC3',
        'NLRC4',
        'NLRC5',
        'NLRP1',
        'NLRP10',
        'NLRP11',
        'NLRP12',
        'NLRP13',
        'NLRP14',
        'NLRP2',
        'NLRP3',
        'NLRP4',
        'NLRP5',
        'NLRP6',
        'NLRP7',
        'NLRP8',
        'NLRX1',
        'NOD1',
        'NOD2',
        'NOP53',
        'NPLOC4',
        'NR1D1',
        'NR1H3',
        'NR1H4',
        'OLR1',
        'OTUD4',
        'OTULIN',
        'PDPK1',
        'PELI1',
        'PGBD1',
        'PGLYRP1',
        'PGLYRP2',
        'PGLYRP3',
        'PGLYRP4',
        'PIK3AP1',
        'PIK3C3',
        'PIK3R4',
        'PJA2',
        'PKD1',
        'PKD1L2',
        'PKD1L3',
        'PLA2R1',
        'PRG2',
        'PRG3',
        'PRKCE',
        'PRSS12',
        'PTPN22',
        'PTPRS',
        'PUM1',
        'PUM2',
        'REG1A',
        'REG1B',
        'REG3A',
        'REG3G',
        'REG4',
        'RELA',
        'RFTN1',
        'RIOK3',
        'RIPK1',
        'RIPK2',
        'RNF125',
        'RPS27A',
        'RPS6KA3',
        'RSAD2',
        'RTN4',
        'S100A1',
        'S100A14',
        'S100A8',
        'S100A9',
        'SARM1',
        'SCARA3',
        'SCARA5',
        'SCARB1',
        'SCARB2',
        'SCARF1',
        'SCARF2',
        'SEC14L1',
        'SELE',
        'SELL',
        'SELP',
        'SFTPA1',
        'SFTPA2',
        'SFTPD',
        'SMPDL3B',
        'SSC4D',
        'SSC5D',
        'STAB1',
        'STAB2',
        'TAB1',
        'TAB2',
        'TAB3',
        'TANK',
        'TBK1',
        'THBD',
        'TICAM1',
        'TICAM2',
        'TIFA',
        'TIRAP',
        'TKFC',
        'TLR1',
        'TLR10',
        'TLR2',
        'TLR3',
        'TLR4',
        'TLR5',
        'TLR6',
        'TLR7',
        'TLR8',
        'TLR9',
        'TMEM173',
        'TMPRSS13',
        'TMPRSS15',
        'TMPRSS2',
        'TMPRSS3',
        'TMPRSS4',
        'TMPRSS5',
        'TNFAIP3',
        'TNIP1',
        'TNIP2',
        'TNIP3',
        'TRAF3',
        'TRAF6',
        'TREML4',
        'TRIL',
        'TRIM15',
        'TRIM5',
        'TSPAN6',
        'TYRO3',
        'UBA52',
        'UBB',
        'UBC',
        'UBE2D1',
        'UBE2D2',
        'UBE2D3',
        "UBE2N",
        "UBE2V1",
        "UBQLN1",
        "UFD1",
        "UNC93B1",
        "USP17L2",
        "VCAN",
        "WDFY1",
        "XIAP",
        "ZCCHC3",
        
    ]
].values
scaled_train_data = StandardScaler().fit_transform(train_data)

embedding = reducer.fit_transform(scaled_train_data)
embedding.shape

scaled_train_data

